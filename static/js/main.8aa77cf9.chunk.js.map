{"version":3,"sources":["Editor.js","Previewer.js","initial-markdown-text.js","App.js","serviceWorker.js","index.js"],"names":["Editor","handleOnChange","event","props","updateCode","target","value","id","className","onChange","this","spellCheck","code","editor","document","getElementById","style","height","scrollHeight","React","Component","Highlights","Previewer","dangerouslySetInnerHTML","__html","markedCode","initialText","store","createStore","state","initMarkdownText","action","type","mapStateToEditorProps","marked","setOptions","pedantic","gfm","breaks","sanitize","smartLists","smartypants","xhtml","headerIds","ConnectedHighlights","connect","ConnectedEditor","dispatch","update","ConnectedPreviewer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+UAEaA,EAAb,4MAEEC,eAAiB,SAACC,GAChB,EAAKC,MAAMC,WAAWF,EAAMG,OAAOC,QAHvC,uDAOI,OAAQ,8BAAUC,GAAG,SAASC,UAAU,eAAeC,SAAUC,KAAKT,eAAgBU,WAAW,SAC9FD,KAAKP,MAAMS,QARlB,0CAaI,IAAMC,EAASC,SAASC,eAAe,UACvCF,EAAOG,MAAMC,OAAS,OACtBJ,EAAOG,MAAMC,OAAb,UAAyBJ,EAAOK,aAAhC,UAfJ,GAA4BC,IAAMC,WAmBrBC,EAAb,uKAEI,OAAQ,yBAAKd,GAAG,WAAWC,UAAU,gBACnC,yBAAKD,GAAG,cACN,8BAAOG,KAAKP,MAAMS,YAJ1B,GAAgCO,IAAMC,WCXvBE,E,uKANX,OAAQ,yBAAKf,GAAG,UAAUC,UAAU,QAAQe,wBAAyB,CACjEC,OAAQd,KAAKP,MAAMsB,kB,GAHHN,IAAMC,WC8CfM,EAhDE,0qCCoBXC,EAAQC,aATE,WAAuC,IAAtCC,EAAqC,uDAA7BC,EAAkBC,EAAW,uCACpD,OAAQA,EAAOC,MACb,IAJW,SAKT,OAAOD,EAAOnB,KAChB,QACE,OAAOiB,MAYPI,EAAwB,SAAArB,GAAI,MAAK,CACrCA,SAGFsB,IAAOC,WAAW,CAChBC,UAAU,EACVC,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,YAAY,EACZC,aAAa,EACbC,OAAO,EACPC,WAAW,IAEb,IAIMC,EAAsBC,YAAQZ,EAAuB,KAA/BY,CAAqCxB,GAC3DyB,EAAkBD,YAAQZ,GAzBL,SAAAc,GAAQ,MAAK,CACtC3C,WAAY,SAAAQ,GACVmC,EAdW,SAACnC,GAAD,MAAW,CAACoB,KADZ,SAC0BpB,QAc5BoC,CAAOpC,QAuBIiC,CAAmD7C,GACrEiD,EAAqBJ,aANM,SAAAjC,GAAI,MAAK,CACxCa,WAAYS,IAAOtB,MAKwC,KAAlCiC,CAAwCvB,GAgBpD4B,MAdf,WACE,OAAQ,kBAAC,IAAD,CAAUvB,MAAOA,GACvB,yBAAKnB,UAAU,iBACb,yBAAKD,GAAG,mBAAmBC,UAAU,kBACnC,kBAACoC,EAAD,MACA,kBAACE,EAAD,OAEF,yBAAKvC,GAAG,oBAAoBC,UAAU,OACpC,kBAACyC,EAAD,UC9CYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5C,SAASC,eAAe,SDuHpB,kBAAmB4C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8aa77cf9.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Editor extends React.Component {\n\n  handleOnChange = (event) => {\n    this.props.updateCode(event.target.value);\n  }\n\n  render() {\n    return (<textarea id=\"editor\" className=\"form-control\" onChange={this.handleOnChange} spellCheck=\"false\">\n      {this.props.code}\n    </textarea>);\n  }\n\n  componentDidMount() {\n    const editor = document.getElementById(\"editor\");\n    editor.style.height = 'auto';\n    editor.style.height = `${editor.scrollHeight}px`;\n  }\n}\n\nexport class Highlights extends React.Component {\n  render() {\n    return (<div id=\"backdrop\" className=\"form-control\">\n      <div id=\"highlights\">\n        <mark>{this.props.code}</mark>\n      </div>\n    </div>)\n  }\n}\n\nexport default Editor;\n","import React from 'react';\n\nclass Previewer extends React.Component {\n  render() {\n    return (<div id=\"preview\" className=\"w-100\" dangerouslySetInnerHTML={{\n        __html: this.props.markedCode\n      }}/>);\n  }\n}\n\nexport default Previewer;\n","const initialText = `\n# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nexport default initialText;\n","import React from 'react';\nimport './App.scss';\nimport {createStore} from 'redux';\nimport {Provider, connect} from 'react-redux';\nimport marked from 'marked';\nimport {Editor, Highlights} from './Editor.js';\nimport Previewer from './Previewer.js';\nimport initMarkdownText from './initial-markdown-text.js';\n\nconst UPDATE = 'UPDATE';\nconst update = (code) => ({type: UPDATE, code});\nconst reducer = (state = initMarkdownText, action) => {\n  switch (action.type) {\n    case UPDATE:\n      return action.code;\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nconst mapDispatchToProps = dispatch => ({\n  updateCode: code => {\n    dispatch(update(code));\n  }\n});\n\nconst mapStateToEditorProps = code => ({\n  code\n});\n\nmarked.setOptions({\n  pedantic: false,\n  gfm: true,\n  breaks: true,\n  sanitize: true,\n  smartLists: true,\n  smartypants: false,\n  xhtml: false,\n  headerIds: false,\n});\nconst mapStateToPreviewerProps = code => ({\n  markedCode: marked(code)\n});\n\nconst ConnectedHighlights = connect(mapStateToEditorProps, null)(Highlights);\nconst ConnectedEditor = connect(mapStateToEditorProps, mapDispatchToProps)(Editor);\nconst ConnectedPreviewer = connect(mapStateToPreviewerProps, null)(Previewer);\n\nfunction App() {\n  return (<Provider store={store}>\n    <div className=\"App row w-100\">\n      <div id=\"editor-container\" className=\"col form-group\">\n        <ConnectedHighlights />\n        <ConnectedEditor />\n      </div>\n      <div id=\"preview-container\" className=\"col\">\n        <ConnectedPreviewer />\n      </div>\n    </div>\n  </Provider>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}